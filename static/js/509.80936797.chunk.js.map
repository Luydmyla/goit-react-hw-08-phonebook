{"version":3,"file":"static/js/509.80936797.chunk.js","mappings":"8OAEaA,EAAOC,EAAAA,GAAAA,KAAH,kKASJC,EAAYD,EAAAA,GAAAA,MAAH,uIAQTE,EAAYF,EAAAA,GAAAA,MAAH,0JASTG,EAAaH,EAAAA,GAAAA,OAAH,gU,mBClBR,SAASI,EAAeC,GACrC,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KAGMC,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,cAAtBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MACd,OAAQP,GACN,IAAK,OACHC,EAAQM,GACR,MACF,IAAK,QACHJ,EAASI,GACT,MACF,QACE,SAWAC,EAAY,WAChBP,EAAQ,IACRE,EAAS,KAGX,OACE,UAACX,EAAD,CAAMiB,SAba,SAAAC,GACnBA,EAAEC,iBAEFb,EAAMW,SAAS,CAAET,KAAAA,EAAME,MAAAA,IACvBM,KASA,WACE,UAACd,EAAD,qBAEE,SAACC,EAAD,CACEiB,KAAK,OACLZ,KAAK,OACLO,MAAOP,EACPa,SAAUT,EACVU,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,mBACA,UAACtB,EAAD,uBAEE,SAACC,EAAD,CACEiB,KAAK,MACLZ,KAAK,QACLO,MAAOL,EACPW,SAAUT,EACVU,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,SAACpB,EAAD,CAAYgB,KAAK,SAAjB,4BCnEC,I,MAAMK,EAAOxB,EAAAA,GAAAA,GAAH,wGAMJyB,EAAkBzB,EAAAA,GAAAA,GAAH,qIAOf0B,EAAU1B,EAAAA,GAAAA,EAAH,4FAMP2B,EAAkB3B,EAAAA,GAAAA,KAAH,8DAKf4B,EAAoB5B,EAAAA,GAAAA,KAAH,8DAKjB6B,EAAoB7B,EAAAA,GAAAA,OAAH,uUCO9B,EAxBoB,SAAC,GAAD,IAAG8B,EAAH,EAAGA,SAAUC,EAAb,EAAaA,gBAAb,OAClB,SAACP,EAAD,UACGM,EAASE,KAAI,gBAAGzB,EAAH,EAAGA,KAAME,EAAT,EAASA,MAAOwB,EAAhB,EAAgBA,GAAhB,OACZ,UAACR,EAAD,YACE,UAACC,EAAD,YACE,UAACC,EAAD,eAAmBpB,EAAnB,UACA,UAACqB,EAAD,eAAqBnB,EAArB,WAEF,SAACoB,EAAD,CAAmBV,KAAK,SAASe,QAAS,kBAAMH,EAAgBE,IAAhE,sBALoBA,S,UCdfE,EAAcnC,EAAAA,GAAAA,MAAH,mNAWXoC,EAAcpC,EAAAA,GAAAA,MAAH,qHCKxB,EAbe,SAAC,GAAyB,IAAvBc,EAAsB,EAAtBA,MAAOM,EAAe,EAAfA,SACvB,OACE,UAACe,EAAD,sCAEE,SAACC,EAAD,CAAajB,KAAK,OAAOL,MAAOA,EAAOM,SAAUA,Q,UCP1CiB,G,QAAYrC,EAAAA,GAAAA,IAAH,oP,8BCcP,SAASsC,IACtB,IAAMxB,GAAQyB,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,UACnCC,GAAWC,EAAAA,EAAAA,MAEjB,GAA6BC,EAAAA,EAAAA,MAArBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,WACd,GAAqBC,EAAAA,EAAAA,MAAdC,GAAP,eACA,GAAqBC,EAAAA,EAAAA,MAAdC,GAAP,eA8BA,OACE,UAACb,EAAD,YACE,uCACA,SAACjC,EAAD,CAAgBY,SA9BD,SAAC,GAAqB,IAAnBT,EAAkB,EAAlBA,KAAME,EAAY,EAAZA,MACpB0C,EAAU,CACd5C,KAAAA,EACAE,MAAAA,GAGF,GAAIoC,EAAKO,MAAK,SAAAD,GAAO,OAAIA,EAAQ5C,OAASA,KACxC,OAAO8C,EAAAA,GAAAA,KAAA,UAAcF,EAAQ5C,KAAtB,gCAIT2C,EAAWC,OAoBT,SAAC,KAAD,CACEG,SAAU,aACVC,UAAW,IACXC,MAAO,aAET,0CACA,SAAC,EAAD,CAAQ1C,MAAOA,EAAOM,SAtBL,SAAAH,GACnByB,GAASe,EAAAA,EAAAA,GAAaxC,EAAEJ,cAAcC,WAuBnCgC,IAAc,SAACY,EAAA,EAAD,IAEdb,IACC,SAAC,EAAD,CACEf,SAvBmB,WACzB,IAAM6B,EAAmB7C,EAAM8C,cAC/B,OAAOf,EAAKJ,QAAO,SAAAU,GAAO,OACxBA,EAAQ5C,KAAKqD,cAAcC,SAASF,MAoBtBG,GACV/B,gBAAiBiB","sources":["components/AddContactForm/AddContactForm.styled.js","components/AddContactForm/AddContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","views/ContactsView/ContactsView.styled.js","views/ContactsView/ContactsView.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 600px;\n  border: 4px solid blue;\n  padding: 15px;\n  text-transform: capitalize;\n`;\n\nexport const FormLabel = styled.label`\n  font-size: 20px;\n  display: flex;\n  justify-content: space-between;\n  font-weight: bold;\n  color: blue;\n`;\n\nexport const FormInput = styled.input`\n  width: 70%;\n  margin-left: 20px;\n  height: 28px;\n  font-size: 14px;\n  color: blue;\n  border: 2px solid rgb(234, 255, 47);\n`;\n\nexport const FormButton = styled.button`\n  margin-top: 44px;\n  display: flex;\n  align-items: center;\n  font-weight: bold;\n  font-size: 18px;\n  width: max-content;\n  /* height: 44px; */\n  padding: 5px;\n  color: rgb(19, 61, 248);\n  background-color: rgb(234, 255, 47);\n  border: 3px solid darkslateblue;\n  border-radius: 10px;\n`;\n","// import './Form.styled.js';\nimport {\n  Form,\n  FormLabel,\n  FormInput,\n  FormButton,\n} from './AddContactForm.styled';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function AddContactForm(props) {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  // console.log(name);\n  // console.log(phone);\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setPhone(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    // console.log(name, number);\n    props.onSubmit({ name, phone });\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <FormLabel>\n        Name :\n        <FormInput\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </FormLabel>\n      <br />\n      <FormLabel>\n        Number :\n        <FormInput\n          type=\"tel\"\n          name=\"phone\"\n          value={phone}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </FormLabel>\n      <FormButton type=\"submit\">Add contact</FormButton>\n    </Form>\n  );\n}\nAddContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\nexport const List = styled.ul`\n  font-size: 20px;\n  padding: 10px;\n  margin-bottom: 15px;\n  margin-top: 0;\n`;\nexport const ContactListItem = styled.li`\n  display: flex;\n  /* align-items: baseline; */\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const Contact = styled.p`\n  width: 80%;\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const ContactListName = styled.span`\n  color: darkblue;\n  display: flex;\n`;\n\nexport const ContactListNumber = styled.span`\n  color: darkcyan;\n  display: flex;\n`;\n\nexport const ContactListButton = styled.button`\n  display: flex;\n  align-items: center;\n  font-weight: bold;\n  font-size: 18px;\n  width: max-content;\n  /* height: 44px; */\n  padding: 5px;\n  /* margin-left: 30px; */\n  color: rgb(19, 61, 248);\n  background-color: rgb(234, 255, 47);\n  border: 3px solid darkslateblue;\n  border-radius: 10px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactList.styled.js';\nimport {\n  List,\n  ContactListItem,\n  ContactListNumber,\n  ContactListName,\n  Contact,\n  ContactListButton,\n} from './ContactList.styled';\n\n// const ContactList = ({ contacts, onDeleteContactList }) => (\nconst ContactList = ({ contacts, onDeleteContact }) => (\n  <List>\n    {contacts.map(({ name, phone, id }) => (\n      <ContactListItem key={id}>\n        <Contact>\n          <ContactListName> {name} : </ContactListName>\n          <ContactListNumber> {phone} </ContactListNumber>\n        </Contact>\n        <ContactListButton type=\"button\" onClick={() => onDeleteContact(id)}>\n          Delete\n        </ContactListButton>\n      </ContactListItem>\n    ))}\n  </List>\n);\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n    })\n  ),\n};\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  font-size: 22px;\n  text-transform: capitalize;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-weight: bold;\n  color: blue;\n  margin-top: 20px;\n`;\n\nexport const FilterInput = styled.input`\n  height: 28px;\n  font-size: 14px;\n  color: blue;\n  border: 2px solid rgb(234, 255, 47);\n`;\n","import React from 'react';\nimport './Filter.styled.js';\nimport { FilterLabel, FilterInput } from './Filter.styled';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <FilterLabel>\n      Find contacts by name :\n      <FilterInput type=\"text\" value={value} onChange={onChange} />\n    </FilterLabel>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 630px;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  font-size: 22px;\n  text-transform: uppercase;\n  color: blue;\n  background: linear-gradient(lightblue, lightyellow);\n  padding: 15px;\n`;\n","import AddContactForm from '../../components/AddContactForm';\nimport ContactList from '../../components/ContactList';\nimport Spinner from '../../components/Spinner';\nimport Filter from '../../components/Filter';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Container } from './ContactsView.styled';\n// import './container.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateFilter } from '../../redux/filterSlice';\nimport {\n  useFetchContactsQuery,\n  useDeleteContactsMutation,\n  useCreateContactsMutation,\n} from 'redux/itemsSlice';\n\nexport default function ContactsView() {\n  const value = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n  // хуки з ітемс-слайсу\n  const { data, isFetching } = useFetchContactsQuery();\n  const [deleteItem] = useDeleteContactsMutation();\n  const [newContact] = useCreateContactsMutation();\n\n  // функція для додавання нового контакту\n  const addContact = ({ name, phone }) => {\n    const contact = {\n      name,\n      phone,\n    };\n    // якщо контакт існуе - даемо nоnеpедження\n    if (data.some(contact => contact.name === name)) {\n      return toast.info(`${contact.name}   is   already in contacts`);\n    }\n    // якщо контакт новий - добавляeмо його до сnиску контактів,\n    //  викоpистовумо хук зі слайсу для відобpаження нового ствоpеного контакту\n    newContact(contact);\n  };\n\n  // функція для збеpігання значення в nолі nошуку\n  const changeFilter = e => {\n    dispatch(updateFilter(e.currentTarget.value));\n  };\n\n  // функція для відобpаження отфільтpованих контактів\n  const getVisibleContacts = () => {\n    const normalizedFilter = value.toLowerCase();\n    return data.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <AddContactForm onSubmit={addContact} />\n      <ToastContainer\n        position={'top-center'}\n        autoClose={3000}\n        theme={'colored'}\n      />\n      <h2> Contacts : </h2>\n      <Filter value={value} onChange={changeFilter} />\n      {/* nід час виконання заnиту кpутиться сnінеp */}\n      {isFetching && <Spinner />}\n      {/*коли npийшли вже дані з бекенду, то pендеимо сnисок контактів */}\n      {data && (\n        <ContactList\n          contacts={getVisibleContacts()}\n          onDeleteContact={deleteItem}\n        />\n      )}\n    </Container>\n  );\n}\n"],"names":["Form","styled","FormLabel","FormInput","FormButton","AddContactForm","props","useState","name","setName","phone","setPhone","handleChange","event","currentTarget","value","resetForm","onSubmit","e","preventDefault","type","onChange","pattern","title","required","List","ContactListItem","Contact","ContactListName","ContactListNumber","ContactListButton","contacts","onDeleteContact","map","id","onClick","FilterLabel","FilterInput","Container","ContactsView","useSelector","state","filter","dispatch","useDispatch","useFetchContactsQuery","data","isFetching","useDeleteContactsMutation","deleteItem","useCreateContactsMutation","newContact","contact","some","toast","position","autoClose","theme","updateFilter","Spinner","normalizedFilter","toLowerCase","includes","getVisibleContacts"],"sourceRoot":""}